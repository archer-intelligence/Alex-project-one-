import json
import logging
import os
from functools import lru_cache
from typing import Any, Dict

import openai

logging.basicConfig(level=logging.INFO)
openai.api_key = os.getenv("OPENAI_API_KEY")
if not openai.api_key:
    raise RuntimeError(
        "OPENAI_API_KEY environment variable not set. Run 'set_api_key.sh' or set it manually."
    )


SCHEMA_PROMPT = (
    "Generate a learning curriculum as JSON strictly following this schema:\n"
    '{"topic":"string","curriculum":[{"module_number":1,"title":"string","description":"string","resources":[{"url":"string","description":"string"}],"exercise":"string","quiz":[{"question":"string","answers":["string"],"correct_answer_index":0}]}]}\n'
    "\nTopic: {topic}\nReturn JSON only."
)


@lru_cache(maxsize=128)
def _call_openai_for_curriculum(topic: str) -> Dict[str, Any]:
    """Return a curriculum generated by the OpenAI API for the given topic."""

    prompt = SCHEMA_PROMPT.format(topic=topic)

    try:
        response = openai.ChatCompletion.create(
            model=os.getenv("OPENAI_MODEL", "gpt-3.5-turbo"),
            messages=[{"role": "user", "content": prompt}],
            temperature=0.2,
        )
    except Exception as e:  # pragma: no cover - network
        logging.error(f"OpenAI API request failed: {e}")
        raise RuntimeError(f"OpenAI failure: {e}")

    try:
        content: str = response["choices"][0]["message"]["content"].strip()
    except (KeyError, IndexError) as e:
        logging.error("Invalid response structure from OpenAI")
        raise RuntimeError("Invalid response structure from OpenAI") from e

    if content.startswith("```"):
        first_open = content.find("{")
        last_close = content.rfind("}")
        if first_open != -1 and last_close != -1:
            content = content[first_open : last_close + 1]

    try:
        data = json.loads(content)
    except Exception as e:
        logging.error("Failed to parse JSON from OpenAI response")
        raise RuntimeError("JSON parse error") from e

    if "topic" not in data or "curriculum" not in data:
        logging.error("Missing fields in OpenAI response")
        raise RuntimeError("Missing expected fields in OpenAI response")
    return data


def generate_curriculum(topic: str) -> Dict[str, Any]:
    """Public API to generate a curriculum for the given topic."""
    logging.info(f"Generating curriculum for topic: {topic}")
    return _call_openai_for_curriculum(topic)
